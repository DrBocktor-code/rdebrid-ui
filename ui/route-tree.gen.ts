/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as AuthedImport } from "./routes/_authed"
import { Route as AuthImport } from "./routes/_auth"
import { Route as AuthedIndexImport } from "./routes/_authed/index"
import { Route as WatchSplatImport } from "./routes/watch.$"
import { Route as AuthedViewImport } from "./routes/_authed/view"
import { Route as AuthedDownloaderImport } from "./routes/_authed/downloader"
import { Route as AuthLoginImport } from "./routes/_auth.login"
import { Route as AuthedDownloaderTabIdImport } from "./routes/_authed/downloader.$tabId"

// Create/Update Routes

const AuthedRoute = AuthedImport.update({
  id: "/_authed",
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: "/_auth",
  getParentRoute: () => rootRoute,
} as any)

const AuthedIndexRoute = AuthedIndexImport.update({
  path: "/",
  getParentRoute: () => AuthedRoute,
} as any)

const WatchSplatRoute = WatchSplatImport.update({
  path: "/watch/$",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./routes/watch.$.lazy").then((d) => d.Route))

const AuthedViewRoute = AuthedViewImport.update({
  path: "/view",
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedDownloaderRoute = AuthedDownloaderImport.update({
  path: "/downloader",
  getParentRoute: () => AuthedRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  path: "/login",
  getParentRoute: () => AuthRoute,
} as any)

const AuthedDownloaderTabIdRoute = AuthedDownloaderTabIdImport.update({
  path: "/$tabId",
  getParentRoute: () => AuthedDownloaderRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/_auth": {
      id: "/_auth"
      path: ""
      fullPath: ""
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    "/_authed": {
      id: "/_authed"
      path: ""
      fullPath: ""
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    "/_auth/login": {
      id: "/_auth/login"
      path: "/login"
      fullPath: "/login"
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    "/_authed/downloader": {
      id: "/_authed/downloader"
      path: "/downloader"
      fullPath: "/downloader"
      preLoaderRoute: typeof AuthedDownloaderImport
      parentRoute: typeof AuthedImport
    }
    "/_authed/view": {
      id: "/_authed/view"
      path: "/view"
      fullPath: "/view"
      preLoaderRoute: typeof AuthedViewImport
      parentRoute: typeof AuthedImport
    }
    "/watch/$": {
      id: "/watch/$"
      path: "/watch/$"
      fullPath: "/watch/$"
      preLoaderRoute: typeof WatchSplatImport
      parentRoute: typeof rootRoute
    }
    "/_authed/": {
      id: "/_authed/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof AuthedIndexImport
      parentRoute: typeof AuthedImport
    }
    "/_authed/downloader/$tabId": {
      id: "/_authed/downloader/$tabId"
      path: "/$tabId"
      fullPath: "/downloader/$tabId"
      preLoaderRoute: typeof AuthedDownloaderTabIdImport
      parentRoute: typeof AuthedDownloaderImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface AuthedDownloaderRouteChildren {
  AuthedDownloaderTabIdRoute: typeof AuthedDownloaderTabIdRoute
}

const AuthedDownloaderRouteChildren: AuthedDownloaderRouteChildren = {
  AuthedDownloaderTabIdRoute: AuthedDownloaderTabIdRoute,
}

const AuthedDownloaderRouteWithChildren =
  AuthedDownloaderRoute._addFileChildren(AuthedDownloaderRouteChildren)

interface AuthedRouteChildren {
  AuthedDownloaderRoute: typeof AuthedDownloaderRouteWithChildren
  AuthedViewRoute: typeof AuthedViewRoute
  AuthedIndexRoute: typeof AuthedIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedDownloaderRoute: AuthedDownloaderRouteWithChildren,
  AuthedViewRoute: AuthedViewRoute,
  AuthedIndexRoute: AuthedIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  "": typeof AuthedRouteWithChildren
  "/login": typeof AuthLoginRoute
  "/downloader": typeof AuthedDownloaderRouteWithChildren
  "/view": typeof AuthedViewRoute
  "/watch/$": typeof WatchSplatRoute
  "/": typeof AuthedIndexRoute
  "/downloader/$tabId": typeof AuthedDownloaderTabIdRoute
}

export interface FileRoutesByTo {
  "": typeof AuthRouteWithChildren
  "/login": typeof AuthLoginRoute
  "/downloader": typeof AuthedDownloaderRouteWithChildren
  "/view": typeof AuthedViewRoute
  "/watch/$": typeof WatchSplatRoute
  "/": typeof AuthedIndexRoute
  "/downloader/$tabId": typeof AuthedDownloaderTabIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/_auth": typeof AuthRouteWithChildren
  "/_authed": typeof AuthedRouteWithChildren
  "/_auth/login": typeof AuthLoginRoute
  "/_authed/downloader": typeof AuthedDownloaderRouteWithChildren
  "/_authed/view": typeof AuthedViewRoute
  "/watch/$": typeof WatchSplatRoute
  "/_authed/": typeof AuthedIndexRoute
  "/_authed/downloader/$tabId": typeof AuthedDownloaderTabIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ""
    | "/login"
    | "/downloader"
    | "/view"
    | "/watch/$"
    | "/"
    | "/downloader/$tabId"
  fileRoutesByTo: FileRoutesByTo
  to:
    | ""
    | "/login"
    | "/downloader"
    | "/view"
    | "/watch/$"
    | "/"
    | "/downloader/$tabId"
  id:
    | "__root__"
    | "/_auth"
    | "/_authed"
    | "/_auth/login"
    | "/_authed/downloader"
    | "/_authed/view"
    | "/watch/$"
    | "/_authed/"
    | "/_authed/downloader/$tabId"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  AuthedRoute: typeof AuthedRouteWithChildren
  WatchSplatRoute: typeof WatchSplatRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  AuthedRoute: AuthedRouteWithChildren,
  WatchSplatRoute: WatchSplatRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/_authed",
        "/watch/$"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/login"
      ]
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/downloader",
        "/_authed/view",
        "/_authed/"
      ]
    },
    "/_auth/login": {
      "filePath": "_auth.login.tsx",
      "parent": "/_auth"
    },
    "/_authed/downloader": {
      "filePath": "_authed/downloader.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/downloader/$tabId"
      ]
    },
    "/_authed/view": {
      "filePath": "_authed/view.tsx",
      "parent": "/_authed"
    },
    "/watch/$": {
      "filePath": "watch.$.tsx"
    },
    "/_authed/": {
      "filePath": "_authed/index.tsx",
      "parent": "/_authed"
    },
    "/_authed/downloader/$tabId": {
      "filePath": "_authed/downloader.$tabId.tsx",
      "parent": "/_authed/downloader"
    }
  }
}
ROUTE_MANIFEST_END */
